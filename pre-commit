#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

exec < /dev/tty
while true; do
echo "Welcome to Commit-min, do you want to minimize your commit? Pass in flags if needed (Y/N)"
    read yn
    case $yn in
        [Yy]* ) echo "Starting Commit-min"; break;;
        [Nn]* ) echo "Okay, exiting Commit-min"; exit;;
        * ) echo "Please answer yes or no.";;
    esac
done
echo "Please enter the name of the test to run Commit-min with (TestFileName#testName)"
read testname
#Run refactor tool here
#exec rm files.txt
repo_path=git rev-parse --show-toplevel  # get the repo root dir
$repo_path > /tmp/fullDiff.txt
git diff --cached $against --unified=0 -- >> fullDiff.txt
git diff --cached $against --name-only -- >> files.txt
#exec 1>&2
python ~/commit-min/run-delta.py $testname

# don't want to commit quite yet, non zero prevents this
echo "Not committing!"
exit 1

